/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AstyGwPlatformSever_H
#define AstyGwPlatformSever_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "asty_gw_plat_service_types.h"

namespace asty_gw_sdk {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AstyGwPlatformSeverIf {
 public:
  virtual ~AstyGwPlatformSeverIf() {}
  virtual bool ping() = 0;
  virtual void device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
  virtual void device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
  virtual void get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
  virtual void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
};

class AstyGwPlatformSeverIfFactory {
 public:
  typedef AstyGwPlatformSeverIf Handler;

  virtual ~AstyGwPlatformSeverIfFactory() {}

  virtual AstyGwPlatformSeverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AstyGwPlatformSeverIf* /* handler */) = 0;
};

class AstyGwPlatformSeverIfSingletonFactory : virtual public AstyGwPlatformSeverIfFactory {
 public:
  AstyGwPlatformSeverIfSingletonFactory(const ::std::shared_ptr<AstyGwPlatformSeverIf>& iface) : iface_(iface) {}
  virtual ~AstyGwPlatformSeverIfSingletonFactory() {}

  virtual AstyGwPlatformSeverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AstyGwPlatformSeverIf* /* handler */) {}

 protected:
  ::std::shared_ptr<AstyGwPlatformSeverIf> iface_;
};

class AstyGwPlatformSeverNull : virtual public AstyGwPlatformSeverIf {
 public:
  virtual ~AstyGwPlatformSeverNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  void device_online( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
  void device_register( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
  void get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
  void request( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
};


class AstyGwPlatformSever_ping_args {
 public:

  AstyGwPlatformSever_ping_args(const AstyGwPlatformSever_ping_args&);
  AstyGwPlatformSever_ping_args& operator=(const AstyGwPlatformSever_ping_args&);
  AstyGwPlatformSever_ping_args() {
  }

  virtual ~AstyGwPlatformSever_ping_args() noexcept;

  bool operator == (const AstyGwPlatformSever_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const AstyGwPlatformSever_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwPlatformSever_ping_pargs {
 public:


  virtual ~AstyGwPlatformSever_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_ping_result__isset {
  _AstyGwPlatformSever_ping_result__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_ping_result__isset;

class AstyGwPlatformSever_ping_result {
 public:

  AstyGwPlatformSever_ping_result(const AstyGwPlatformSever_ping_result&);
  AstyGwPlatformSever_ping_result& operator=(const AstyGwPlatformSever_ping_result&);
  AstyGwPlatformSever_ping_result() : success(0) {
  }

  virtual ~AstyGwPlatformSever_ping_result() noexcept;
  bool success;

  _AstyGwPlatformSever_ping_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const AstyGwPlatformSever_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_ping_presult__isset {
  _AstyGwPlatformSever_ping_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_ping_presult__isset;

class AstyGwPlatformSever_ping_presult {
 public:


  virtual ~AstyGwPlatformSever_ping_presult() noexcept;
  bool* success;

  _AstyGwPlatformSever_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AstyGwPlatformSever_device_online_args__isset {
  _AstyGwPlatformSever_device_online_args__isset() : request(false) {}
  bool request :1;
} _AstyGwPlatformSever_device_online_args__isset;

class AstyGwPlatformSever_device_online_args {
 public:

  AstyGwPlatformSever_device_online_args(const AstyGwPlatformSever_device_online_args&);
  AstyGwPlatformSever_device_online_args& operator=(const AstyGwPlatformSever_device_online_args&);
  AstyGwPlatformSever_device_online_args() {
  }

  virtual ~AstyGwPlatformSever_device_online_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwPlatformSever_device_online_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwPlatformSever_device_online_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_device_online_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_device_online_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwPlatformSever_device_online_pargs {
 public:


  virtual ~AstyGwPlatformSever_device_online_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_device_online_result__isset {
  _AstyGwPlatformSever_device_online_result__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_device_online_result__isset;

class AstyGwPlatformSever_device_online_result {
 public:

  AstyGwPlatformSever_device_online_result(const AstyGwPlatformSever_device_online_result&);
  AstyGwPlatformSever_device_online_result& operator=(const AstyGwPlatformSever_device_online_result&);
  AstyGwPlatformSever_device_online_result() {
  }

  virtual ~AstyGwPlatformSever_device_online_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwPlatformSever_device_online_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwPlatformSever_device_online_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_device_online_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_device_online_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_device_online_presult__isset {
  _AstyGwPlatformSever_device_online_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_device_online_presult__isset;

class AstyGwPlatformSever_device_online_presult {
 public:


  virtual ~AstyGwPlatformSever_device_online_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwPlatformSever_device_online_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AstyGwPlatformSever_device_register_args__isset {
  _AstyGwPlatformSever_device_register_args__isset() : request(false) {}
  bool request :1;
} _AstyGwPlatformSever_device_register_args__isset;

class AstyGwPlatformSever_device_register_args {
 public:

  AstyGwPlatformSever_device_register_args(const AstyGwPlatformSever_device_register_args&);
  AstyGwPlatformSever_device_register_args& operator=(const AstyGwPlatformSever_device_register_args&);
  AstyGwPlatformSever_device_register_args() {
  }

  virtual ~AstyGwPlatformSever_device_register_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwPlatformSever_device_register_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwPlatformSever_device_register_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_device_register_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_device_register_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwPlatformSever_device_register_pargs {
 public:


  virtual ~AstyGwPlatformSever_device_register_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_device_register_result__isset {
  _AstyGwPlatformSever_device_register_result__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_device_register_result__isset;

class AstyGwPlatformSever_device_register_result {
 public:

  AstyGwPlatformSever_device_register_result(const AstyGwPlatformSever_device_register_result&);
  AstyGwPlatformSever_device_register_result& operator=(const AstyGwPlatformSever_device_register_result&);
  AstyGwPlatformSever_device_register_result() {
  }

  virtual ~AstyGwPlatformSever_device_register_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwPlatformSever_device_register_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwPlatformSever_device_register_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_device_register_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_device_register_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_device_register_presult__isset {
  _AstyGwPlatformSever_device_register_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_device_register_presult__isset;

class AstyGwPlatformSever_device_register_presult {
 public:


  virtual ~AstyGwPlatformSever_device_register_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwPlatformSever_device_register_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AstyGwPlatformSever_get_mq_host_args__isset {
  _AstyGwPlatformSever_get_mq_host_args__isset() : request(false) {}
  bool request :1;
} _AstyGwPlatformSever_get_mq_host_args__isset;

class AstyGwPlatformSever_get_mq_host_args {
 public:

  AstyGwPlatformSever_get_mq_host_args(const AstyGwPlatformSever_get_mq_host_args&);
  AstyGwPlatformSever_get_mq_host_args& operator=(const AstyGwPlatformSever_get_mq_host_args&);
  AstyGwPlatformSever_get_mq_host_args() {
  }

  virtual ~AstyGwPlatformSever_get_mq_host_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwPlatformSever_get_mq_host_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwPlatformSever_get_mq_host_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_get_mq_host_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_get_mq_host_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwPlatformSever_get_mq_host_pargs {
 public:


  virtual ~AstyGwPlatformSever_get_mq_host_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_get_mq_host_result__isset {
  _AstyGwPlatformSever_get_mq_host_result__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_get_mq_host_result__isset;

class AstyGwPlatformSever_get_mq_host_result {
 public:

  AstyGwPlatformSever_get_mq_host_result(const AstyGwPlatformSever_get_mq_host_result&);
  AstyGwPlatformSever_get_mq_host_result& operator=(const AstyGwPlatformSever_get_mq_host_result&);
  AstyGwPlatformSever_get_mq_host_result() {
  }

  virtual ~AstyGwPlatformSever_get_mq_host_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwPlatformSever_get_mq_host_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwPlatformSever_get_mq_host_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_get_mq_host_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_get_mq_host_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_get_mq_host_presult__isset {
  _AstyGwPlatformSever_get_mq_host_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_get_mq_host_presult__isset;

class AstyGwPlatformSever_get_mq_host_presult {
 public:


  virtual ~AstyGwPlatformSever_get_mq_host_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwPlatformSever_get_mq_host_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AstyGwPlatformSever_request_args__isset {
  _AstyGwPlatformSever_request_args__isset() : request(false) {}
  bool request :1;
} _AstyGwPlatformSever_request_args__isset;

class AstyGwPlatformSever_request_args {
 public:

  AstyGwPlatformSever_request_args(const AstyGwPlatformSever_request_args&);
  AstyGwPlatformSever_request_args& operator=(const AstyGwPlatformSever_request_args&);
  AstyGwPlatformSever_request_args() {
  }

  virtual ~AstyGwPlatformSever_request_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwPlatformSever_request_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwPlatformSever_request_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwPlatformSever_request_pargs {
 public:


  virtual ~AstyGwPlatformSever_request_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_request_result__isset {
  _AstyGwPlatformSever_request_result__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_request_result__isset;

class AstyGwPlatformSever_request_result {
 public:

  AstyGwPlatformSever_request_result(const AstyGwPlatformSever_request_result&);
  AstyGwPlatformSever_request_result& operator=(const AstyGwPlatformSever_request_result&);
  AstyGwPlatformSever_request_result() {
  }

  virtual ~AstyGwPlatformSever_request_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwPlatformSever_request_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwPlatformSever_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwPlatformSever_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwPlatformSever_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwPlatformSever_request_presult__isset {
  _AstyGwPlatformSever_request_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwPlatformSever_request_presult__isset;

class AstyGwPlatformSever_request_presult {
 public:


  virtual ~AstyGwPlatformSever_request_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwPlatformSever_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AstyGwPlatformSeverClient : virtual public AstyGwPlatformSeverIf {
 public:
  AstyGwPlatformSeverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AstyGwPlatformSeverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  void device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_device_online(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return);
  void device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_device_register(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return);
  void get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_get_mq_host(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return);
  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_request(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_request( ::asty_gw_sdk::AstyGwMsgResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AstyGwPlatformSeverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AstyGwPlatformSeverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AstyGwPlatformSeverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_device_online(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_device_register(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_mq_host(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AstyGwPlatformSeverProcessor(::std::shared_ptr<AstyGwPlatformSeverIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &AstyGwPlatformSeverProcessor::process_ping;
    processMap_["device_online"] = &AstyGwPlatformSeverProcessor::process_device_online;
    processMap_["device_register"] = &AstyGwPlatformSeverProcessor::process_device_register;
    processMap_["get_mq_host"] = &AstyGwPlatformSeverProcessor::process_get_mq_host;
    processMap_["request"] = &AstyGwPlatformSeverProcessor::process_request;
  }

  virtual ~AstyGwPlatformSeverProcessor() {}
};

class AstyGwPlatformSeverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AstyGwPlatformSeverProcessorFactory(const ::std::shared_ptr< AstyGwPlatformSeverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< AstyGwPlatformSeverIfFactory > handlerFactory_;
};

class AstyGwPlatformSeverMultiface : virtual public AstyGwPlatformSeverIf {
 public:
  AstyGwPlatformSeverMultiface(std::vector<std::shared_ptr<AstyGwPlatformSeverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AstyGwPlatformSeverMultiface() {}
 protected:
  std::vector<std::shared_ptr<AstyGwPlatformSeverIf> > ifaces_;
  AstyGwPlatformSeverMultiface() {}
  void add(::std::shared_ptr<AstyGwPlatformSeverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->device_online(_return, request);
    }
    ifaces_[i]->device_online(_return, request);
    return;
  }

  void device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->device_register(_return, request);
    }
    ifaces_[i]->device_register(_return, request);
    return;
  }

  void get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_mq_host(_return, request);
    }
    ifaces_[i]->get_mq_host(_return, request);
    return;
  }

  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(_return, request);
    }
    ifaces_[i]->request(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AstyGwPlatformSeverConcurrentClient : virtual public AstyGwPlatformSeverIf {
 public:
  AstyGwPlatformSeverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AstyGwPlatformSeverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
  void device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_device_online(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_device_online( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
  void device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_device_register(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_device_register( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
  void get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_get_mq_host(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_get_mq_host( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_request(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
