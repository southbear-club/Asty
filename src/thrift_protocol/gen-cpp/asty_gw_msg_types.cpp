/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "asty_gw_msg_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace asty_gw_sdk {

int _kAstyGwDomainEValues[] = {
  AstyGwDomainE::GW_DOMAIN_MICRO_KERNEL,
  AstyGwDomainE::GW_DOMAIN_BASIC,
  AstyGwDomainE::GW_DOMAIN_ALARM,
  AstyGwDomainE::GW_DOMAIN_DEVICE,
  AstyGwDomainE::GW_DOMAIN_MEDIA,
  AstyGwDomainE::GW_DOMAIN_SPEC,
  AstyGwDomainE::GW_DOMAIN_TRANSPORT
};
const char* _kAstyGwDomainENames[] = {
  "GW_DOMAIN_MICRO_KERNEL",
  "GW_DOMAIN_BASIC",
  "GW_DOMAIN_ALARM",
  "GW_DOMAIN_DEVICE",
  "GW_DOMAIN_MEDIA",
  "GW_DOMAIN_SPEC",
  "GW_DOMAIN_TRANSPORT"
};
const std::map<int, const char*> _AstyGwDomainE_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(7, _kAstyGwDomainEValues, _kAstyGwDomainENames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const AstyGwDomainE::type& val) {
  std::map<int, const char*>::const_iterator it = _AstyGwDomainE_VALUES_TO_NAMES.find(val);
  if (it != _AstyGwDomainE_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const AstyGwDomainE::type& val) {
  std::map<int, const char*>::const_iterator it = _AstyGwDomainE_VALUES_TO_NAMES.find(val);
  if (it != _AstyGwDomainE_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


AstyGwMsgResponse::~AstyGwMsgResponse() noexcept {
}


void AstyGwMsgResponse::__set_result(const std::string& val) {
  this->result = val;
}

void AstyGwMsgResponse::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const AstyGwMsgResponse& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AstyGwMsgResponse::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->result);
          this->__isset.result = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstyGwMsgResponse::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AstyGwMsgResponse");

  xfer += oprot->writeFieldBegin("result", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->result);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AstyGwMsgResponse &a, AstyGwMsgResponse &b) {
  using ::std::swap;
  swap(a.result, b.result);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

AstyGwMsgResponse::AstyGwMsgResponse(const AstyGwMsgResponse& other0) {
  result = other0.result;
  data = other0.data;
  __isset = other0.__isset;
}
AstyGwMsgResponse& AstyGwMsgResponse::operator=(const AstyGwMsgResponse& other1) {
  result = other1.result;
  data = other1.data;
  __isset = other1.__isset;
  return *this;
}
void AstyGwMsgResponse::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AstyGwMsgResponse(";
  out << "result=" << to_string(result);
  out << ", " << "data=" << to_string(data);
  out << ")";
}


AstyGwMsgRequest::~AstyGwMsgRequest() noexcept {
}


void AstyGwMsgRequest::__set_header(const std::string& val) {
  this->header = val;
}

void AstyGwMsgRequest::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const AstyGwMsgRequest& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AstyGwMsgRequest::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->header);
          this->__isset.header = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AstyGwMsgRequest::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AstyGwMsgRequest");

  xfer += oprot->writeFieldBegin("header", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->header);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AstyGwMsgRequest &a, AstyGwMsgRequest &b) {
  using ::std::swap;
  swap(a.header, b.header);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

AstyGwMsgRequest::AstyGwMsgRequest(const AstyGwMsgRequest& other2) {
  header = other2.header;
  data = other2.data;
  __isset = other2.__isset;
}
AstyGwMsgRequest& AstyGwMsgRequest::operator=(const AstyGwMsgRequest& other3) {
  header = other3.header;
  data = other3.data;
  __isset = other3.__isset;
  return *this;
}
void AstyGwMsgRequest::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AstyGwMsgRequest(";
  out << "header=" << to_string(header);
  out << ", " << "data=" << to_string(data);
  out << ")";
}

} // namespace
