/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AstyGwDeviceSever_H
#define AstyGwDeviceSever_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "asty_gw_device_service_types.h"

namespace asty_gw_sdk {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AstyGwDeviceSeverIf {
 public:
  virtual ~AstyGwDeviceSeverIf() {}
  virtual void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
  virtual void user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) = 0;
};

class AstyGwDeviceSeverIfFactory {
 public:
  typedef AstyGwDeviceSeverIf Handler;

  virtual ~AstyGwDeviceSeverIfFactory() {}

  virtual AstyGwDeviceSeverIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AstyGwDeviceSeverIf* /* handler */) = 0;
};

class AstyGwDeviceSeverIfSingletonFactory : virtual public AstyGwDeviceSeverIfFactory {
 public:
  AstyGwDeviceSeverIfSingletonFactory(const ::std::shared_ptr<AstyGwDeviceSeverIf>& iface) : iface_(iface) {}
  virtual ~AstyGwDeviceSeverIfSingletonFactory() {}

  virtual AstyGwDeviceSeverIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AstyGwDeviceSeverIf* /* handler */) {}

 protected:
  ::std::shared_ptr<AstyGwDeviceSeverIf> iface_;
};

class AstyGwDeviceSeverNull : virtual public AstyGwDeviceSeverIf {
 public:
  virtual ~AstyGwDeviceSeverNull() {}
  void request( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
  void user_bind( ::asty_gw_sdk::AstyGwMsgResponse& /* _return */, const  ::asty_gw_sdk::AstyGwMsgRequest& /* request */) {
    return;
  }
};

typedef struct _AstyGwDeviceSever_request_args__isset {
  _AstyGwDeviceSever_request_args__isset() : request(false) {}
  bool request :1;
} _AstyGwDeviceSever_request_args__isset;

class AstyGwDeviceSever_request_args {
 public:

  AstyGwDeviceSever_request_args(const AstyGwDeviceSever_request_args&);
  AstyGwDeviceSever_request_args& operator=(const AstyGwDeviceSever_request_args&);
  AstyGwDeviceSever_request_args() {
  }

  virtual ~AstyGwDeviceSever_request_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwDeviceSever_request_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwDeviceSever_request_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwDeviceSever_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwDeviceSever_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwDeviceSever_request_pargs {
 public:


  virtual ~AstyGwDeviceSever_request_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwDeviceSever_request_result__isset {
  _AstyGwDeviceSever_request_result__isset() : success(false) {}
  bool success :1;
} _AstyGwDeviceSever_request_result__isset;

class AstyGwDeviceSever_request_result {
 public:

  AstyGwDeviceSever_request_result(const AstyGwDeviceSever_request_result&);
  AstyGwDeviceSever_request_result& operator=(const AstyGwDeviceSever_request_result&);
  AstyGwDeviceSever_request_result() {
  }

  virtual ~AstyGwDeviceSever_request_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwDeviceSever_request_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwDeviceSever_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwDeviceSever_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwDeviceSever_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwDeviceSever_request_presult__isset {
  _AstyGwDeviceSever_request_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwDeviceSever_request_presult__isset;

class AstyGwDeviceSever_request_presult {
 public:


  virtual ~AstyGwDeviceSever_request_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwDeviceSever_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AstyGwDeviceSever_user_bind_args__isset {
  _AstyGwDeviceSever_user_bind_args__isset() : request(false) {}
  bool request :1;
} _AstyGwDeviceSever_user_bind_args__isset;

class AstyGwDeviceSever_user_bind_args {
 public:

  AstyGwDeviceSever_user_bind_args(const AstyGwDeviceSever_user_bind_args&);
  AstyGwDeviceSever_user_bind_args& operator=(const AstyGwDeviceSever_user_bind_args&);
  AstyGwDeviceSever_user_bind_args() {
  }

  virtual ~AstyGwDeviceSever_user_bind_args() noexcept;
   ::asty_gw_sdk::AstyGwMsgRequest request;

  _AstyGwDeviceSever_user_bind_args__isset __isset;

  void __set_request(const  ::asty_gw_sdk::AstyGwMsgRequest& val);

  bool operator == (const AstyGwDeviceSever_user_bind_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const AstyGwDeviceSever_user_bind_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwDeviceSever_user_bind_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AstyGwDeviceSever_user_bind_pargs {
 public:


  virtual ~AstyGwDeviceSever_user_bind_pargs() noexcept;
  const  ::asty_gw_sdk::AstyGwMsgRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwDeviceSever_user_bind_result__isset {
  _AstyGwDeviceSever_user_bind_result__isset() : success(false) {}
  bool success :1;
} _AstyGwDeviceSever_user_bind_result__isset;

class AstyGwDeviceSever_user_bind_result {
 public:

  AstyGwDeviceSever_user_bind_result(const AstyGwDeviceSever_user_bind_result&);
  AstyGwDeviceSever_user_bind_result& operator=(const AstyGwDeviceSever_user_bind_result&);
  AstyGwDeviceSever_user_bind_result() {
  }

  virtual ~AstyGwDeviceSever_user_bind_result() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse success;

  _AstyGwDeviceSever_user_bind_result__isset __isset;

  void __set_success(const  ::asty_gw_sdk::AstyGwMsgResponse& val);

  bool operator == (const AstyGwDeviceSever_user_bind_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AstyGwDeviceSever_user_bind_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwDeviceSever_user_bind_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AstyGwDeviceSever_user_bind_presult__isset {
  _AstyGwDeviceSever_user_bind_presult__isset() : success(false) {}
  bool success :1;
} _AstyGwDeviceSever_user_bind_presult__isset;

class AstyGwDeviceSever_user_bind_presult {
 public:


  virtual ~AstyGwDeviceSever_user_bind_presult() noexcept;
   ::asty_gw_sdk::AstyGwMsgResponse* success;

  _AstyGwDeviceSever_user_bind_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AstyGwDeviceSeverClient : virtual public AstyGwDeviceSeverIf {
 public:
  AstyGwDeviceSeverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AstyGwDeviceSeverClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_request(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_request( ::asty_gw_sdk::AstyGwMsgResponse& _return);
  void user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void send_user_bind(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AstyGwDeviceSeverProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<AstyGwDeviceSeverIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AstyGwDeviceSeverProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_user_bind(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AstyGwDeviceSeverProcessor(::std::shared_ptr<AstyGwDeviceSeverIf> iface) :
    iface_(iface) {
    processMap_["request"] = &AstyGwDeviceSeverProcessor::process_request;
    processMap_["user_bind"] = &AstyGwDeviceSeverProcessor::process_user_bind;
  }

  virtual ~AstyGwDeviceSeverProcessor() {}
};

class AstyGwDeviceSeverProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AstyGwDeviceSeverProcessorFactory(const ::std::shared_ptr< AstyGwDeviceSeverIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< AstyGwDeviceSeverIfFactory > handlerFactory_;
};

class AstyGwDeviceSeverMultiface : virtual public AstyGwDeviceSeverIf {
 public:
  AstyGwDeviceSeverMultiface(std::vector<std::shared_ptr<AstyGwDeviceSeverIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AstyGwDeviceSeverMultiface() {}
 protected:
  std::vector<std::shared_ptr<AstyGwDeviceSeverIf> > ifaces_;
  AstyGwDeviceSeverMultiface() {}
  void add(::std::shared_ptr<AstyGwDeviceSeverIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->request(_return, request);
    }
    ifaces_[i]->request(_return, request);
    return;
  }

  void user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->user_bind(_return, request);
    }
    ifaces_[i]->user_bind(_return, request);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AstyGwDeviceSeverConcurrentClient : virtual public AstyGwDeviceSeverIf {
 public:
  AstyGwDeviceSeverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  AstyGwDeviceSeverConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_request(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_request( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
  void user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return, const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  int32_t send_user_bind(const  ::asty_gw_sdk::AstyGwMsgRequest& request);
  void recv_user_bind( ::asty_gw_sdk::AstyGwMsgResponse& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
