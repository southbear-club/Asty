/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef asty_gw_msg_TYPES_H
#define asty_gw_msg_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace asty_gw_sdk {

struct AstyGwDomainE {
  enum type {
    GW_DOMAIN_MICRO_KERNEL = 0,
    GW_DOMAIN_BASIC = 1,
    GW_DOMAIN_ALARM = 2,
    GW_DOMAIN_DEVICE = 3,
    GW_DOMAIN_MEDIA = 4,
    GW_DOMAIN_SPEC = 5,
    GW_DOMAIN_TRANSPORT = 6
  };
};

extern const std::map<int, const char*> _AstyGwDomainE_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const AstyGwDomainE::type& val);

std::string to_string(const AstyGwDomainE::type& val);

class AstyGwMsgResponse;

class AstyGwMsgRequest;

typedef struct _AstyGwMsgResponse__isset {
  _AstyGwMsgResponse__isset() : result(false), data(false) {}
  bool result :1;
  bool data :1;
} _AstyGwMsgResponse__isset;

class AstyGwMsgResponse : public virtual ::apache::thrift::TBase {
 public:

  AstyGwMsgResponse(const AstyGwMsgResponse&);
  AstyGwMsgResponse& operator=(const AstyGwMsgResponse&);
  AstyGwMsgResponse() : result(), data() {
  }

  virtual ~AstyGwMsgResponse() noexcept;
  std::string result;
  std::string data;

  _AstyGwMsgResponse__isset __isset;

  void __set_result(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const AstyGwMsgResponse & rhs) const
  {
    if (!(result == rhs.result))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AstyGwMsgResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwMsgResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AstyGwMsgResponse &a, AstyGwMsgResponse &b);

std::ostream& operator<<(std::ostream& out, const AstyGwMsgResponse& obj);

typedef struct _AstyGwMsgRequest__isset {
  _AstyGwMsgRequest__isset() : header(false), data(false) {}
  bool header :1;
  bool data :1;
} _AstyGwMsgRequest__isset;

class AstyGwMsgRequest : public virtual ::apache::thrift::TBase {
 public:

  AstyGwMsgRequest(const AstyGwMsgRequest&);
  AstyGwMsgRequest& operator=(const AstyGwMsgRequest&);
  AstyGwMsgRequest() : header(), data() {
  }

  virtual ~AstyGwMsgRequest() noexcept;
  std::string header;
  std::string data;

  _AstyGwMsgRequest__isset __isset;

  void __set_header(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const AstyGwMsgRequest & rhs) const
  {
    if (!(header == rhs.header))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const AstyGwMsgRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AstyGwMsgRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(AstyGwMsgRequest &a, AstyGwMsgRequest &b);

std::ostream& operator<<(std::ostream& out, const AstyGwMsgRequest& obj);

} // namespace

#endif
